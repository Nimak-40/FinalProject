// <auto-generated />
using System;
using Achare.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tehran",
                            State = "Tehran"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mashhad",
                            State = "Mashhad"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Isfahan",
                            State = "Isfahan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Shiraz",
                            State = "Shiraz"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tabriz",
                            State = "Tabriz"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Karaj",
                            State = "Karaj"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Qom",
                            State = "Qom"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ahvaz",
                            State = "Ahvaz"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kermanshah",
                            State = "Kermanshah"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Urmia",
                            State = "Urmia"
                        });
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.OrderRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecialistId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("OrderRequests");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SpecialistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstimatedDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 500000m,
                            Description = "نظافت کامل منزل توسط نیروی متخصص",
                            EstimatedDurationInMinutes = 0,
                            Name = "نظافت منزل",
                            Price = 500000m,
                            ServiceCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 300000m,
                            Description = "شستشوی انواع فرش و موکت",
                            EstimatedDurationInMinutes = 0,
                            Name = "شستشوی فرش",
                            Price = 300000m,
                            ServiceCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 700000m,
                            Description = "تعمیر یخچال، ماشین لباسشویی و ...",
                            EstimatedDurationInMinutes = 0,
                            Name = "تعمیر لوازم خانگی",
                            Price = 700000m,
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 1200000m,
                            Description = "نقاشی داخلی و خارجی ساختمان",
                            EstimatedDurationInMinutes = 0,
                            Name = "نقاشی ساختمان",
                            Price = 1200000m,
                            ServiceCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 150000m,
                            Description = "خدمات اصلاح و آرایش مو",
                            EstimatedDurationInMinutes = 0,
                            Name = "اصلاح مو",
                            Price = 150000m,
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 800000m,
                            Description = "میکاپ تخصصی عروس و مجالس",
                            EstimatedDurationInMinutes = 0,
                            Name = "میکاپ",
                            Price = 800000m,
                            ServiceCategoryId = 3
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 400000m,
                            Description = "آموزش زبان انگلیسی با بهترین اساتید",
                            EstimatedDurationInMinutes = 0,
                            Name = "کلاس زبان انگلیسی",
                            Price = 400000m,
                            ServiceCategoryId = 4
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 500000m,
                            Description = "آموزش انواع سازها",
                            EstimatedDurationInMinutes = 0,
                            Name = "کلاس موسیقی",
                            Price = 500000m,
                            ServiceCategoryId = 4
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 2000000m,
                            Description = "خدمات حمل و نقل اثاثیه",
                            EstimatedDurationInMinutes = 0,
                            Name = "باربری و اثاث‌کشی",
                            Price = 2000000m,
                            ServiceCategoryId = 5
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 1000000m,
                            Description = "جابجایی مسافران با خودروهای لوکس",
                            EstimatedDurationInMinutes = 0,
                            Name = "حمل‌ونقل مسافران",
                            Price = 1000000m,
                            ServiceCategoryId = 5
                        });
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "نظافت"
                        },
                        new
                        {
                            Id = 2,
                            Name = "تعمیرات"
                        },
                        new
                        {
                            Id = 3,
                            Name = "خدمات زیبایی"
                        },
                        new
                        {
                            Id = 4,
                            Name = "آموزش"
                        },
                        new
                        {
                            Id = 5,
                            Name = "حمل و نقل"
                        });
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialistId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Admin", b =>
                {
                    b.HasBaseType("Achare.src.Domain.Core.Entities.User");

                    b.Property<string>("AdminCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Customer", b =>
                {
                    b.HasBaseType("Achare.src.Domain.Core.Entities.User");

                    b.Property<string>("PreferredAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "cust1@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9032),
                            Username = "customer1",
                            PreferredAddress = "Tehran, St. 1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "cust2@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9037),
                            Username = "customer2",
                            PreferredAddress = "Mashhad, St. 2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "cust3@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9039),
                            Username = "customer3",
                            PreferredAddress = "Isfahan, St. 3"
                        },
                        new
                        {
                            Id = 4,
                            Email = "cust4@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9041),
                            Username = "customer4",
                            PreferredAddress = "Shiraz, St. 4"
                        },
                        new
                        {
                            Id = 5,
                            Email = "cust5@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9042),
                            Username = "customer5",
                            PreferredAddress = "Tabriz, St. 5"
                        },
                        new
                        {
                            Id = 6,
                            Email = "cust6@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9044),
                            Username = "customer6",
                            PreferredAddress = "Karaj, St. 6"
                        },
                        new
                        {
                            Id = 7,
                            Email = "cust7@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9045),
                            Username = "customer7",
                            PreferredAddress = "Qom, St. 7"
                        },
                        new
                        {
                            Id = 8,
                            Email = "cust8@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9047),
                            Username = "customer8",
                            PreferredAddress = "Ahvaz, St. 8"
                        },
                        new
                        {
                            Id = 9,
                            Email = "cust9@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9048),
                            Username = "customer9",
                            PreferredAddress = "Kermanshah, St. 9"
                        },
                        new
                        {
                            Id = 10,
                            Email = "cust10@example.com",
                            PasswordHash = "123456",
                            RegistrationDate = new DateTime(2025, 2, 14, 7, 48, 56, 614, DateTimeKind.Utc).AddTicks(9049),
                            Username = "customer10",
                            PreferredAddress = "Urmia, St. 10"
                        });
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Specialist", b =>
                {
                    b.HasBaseType("Achare.src.Domain.Core.Entities.User");

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2, 1)
                        .HasColumnType("float(2)")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Specialist");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.ChatMessage", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("ChatMessages")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Achare.src.Domain.Core.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Achare.src.Domain.Core.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.OrderRequest", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderRequests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Achare.src.Domain.Core.Entities.Specialist", "Specialist")
                        .WithMany("OrderRequests")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Specialist");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Payment", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Review", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Achare.src.Domain.Core.Entities.Specialist", null)
                        .WithMany("Reviews")
                        .HasForeignKey("SpecialistId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Service", b =>
                {
                    b.HasOne("Achare.src.Domain.Core.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.User", b =>
                {
                    b.HasOne("Achare.src.Domain.Core.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Achare.src.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Achare.src.Domain.Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Achare.src.Domain.Core.Entities.Specialist", null)
                        .WithMany("Orders")
                        .HasForeignKey("SpecialistId");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.User", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("OrderRequests");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Achare.src.Domain.Core.Entities.Specialist", b =>
                {
                    b.Navigation("OrderRequests");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
